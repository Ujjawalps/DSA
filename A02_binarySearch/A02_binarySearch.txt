ðŸ“˜ A02_BinarySearch â€“ Interview Notes

Algorithm: Binary Search
------------------------
- Binary Search is a divide-and-conquer algorithm.
- Requires **sorted arrays**.
- Repeatedly divides the search space in half until the target is found.

Time Complexity:
-----------------
- Best Case â†’ O(1) (middle element is target)
- Worst Case â†’ O(log n)
- Space Complexity â†’ O(1) for iterative, O(log n) for recursive

Variants:
----------
1. **Standard Binary Search** â†’ search in 1D sorted array
2. **Binary Search in 2D array** â†’ usually row-wise and column-wise sorted
3. **Order-Agnostic Binary Search** â†’ works on both ascending and descending arrays
4. **Infinite Array Search** â†’ find range first, then apply binary search

Key Points:
------------
- Always check boundary conditions to avoid IndexOutOfBoundsException.
- Can be implemented iteratively or recursively.
- Explain difference from Linear Search (O(log n) vs O(n)).
- Useful for optimization problems (searching in range).

Example (Pseudocode):
---------------------
low = 0, high = n-1
while low <= high:
    mid = (low + high)/2
    if arr[mid] == target:
        return mid
    else if arr[mid] < target:
        low = mid + 1
    else:
        high = mid - 1
return -1
